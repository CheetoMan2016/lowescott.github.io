<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scott&#39;s Weblog </title>
    <link>http://lowescott.github.io/tags/encryption/index.xml/</link>
    <language>en-us</language>
    <author>Scott Lowe</author>
    <rights>(C) 2005</rights>
    <updated>2005-12-13 11:18:37 &#43;0000 &#43;0000</updated>

    
      
        <item>
          <title>Application-Specific VPNs</title>
          <link>http://lowescott.github.io/2005/12/13/application-specific-vpns/</link>
          <pubDate>Tue, 13 Dec 2005 11:18:37 &#43;0000</pubDate>
          <author>Scott Lowe</author>
          <guid>http://lowescott.github.io/2005/12/13/application-specific-vpns/</guid>
          <description>

&lt;p&gt;I coined the term &amp;ldquo;application specific VPNs&amp;rdquo; as I began exploring the many uses of tools such as SSH (the &lt;a href=&#34;http://www.openssh.org/&#34;&gt;OpenSSH&lt;/a&gt; implementation, in particular) and &lt;a href=&#34;http://stunnel.mirt.net/index.html&#34;&gt;Stunnel&lt;/a&gt; (the open source &lt;a href=&#34;http://en.wikipedia.org/wiki/Secure_Sockets_Layer&#34;&gt;SSL&lt;/a&gt; wrapper). An &amp;ldquo;application specific VPN&amp;rdquo; is a technique for employing encrypted communication with a particular remote application that does not affect the operation of other applications (local or remote) on the system.&lt;/p&gt;

&lt;p&gt;In general, most VPNs employ technology such as &lt;a href=&#34;http://en.wikipedia.org/wiki/PPTP&#34;&gt;PPTP&lt;/a&gt; or &lt;a href=&#34;http://en.wikipedia.org/wiki/Ipsec&#34;&gt;IPSec&lt;/a&gt;. These protocols usually affect &lt;em&gt;all&lt;/em&gt; traffic originating from that system (unless we use split tunneling). With an application specific VPN, only particular types of traffic are affected, and these particular types of traffic are wrapped in an encrypted SSH or SSL tunnel using either OpenSSH or Stunnel, respectively. Other types of traffic are unaffected.&lt;/p&gt;

&lt;p&gt;While this may seem old hat to long-time Linux, Unix, or &lt;a href=&#34;http://www.apple.com/macosx/&#34;&gt;Mac OS X&lt;/a&gt; users, this is a relatively new concept to other platforms. Being a (fairly) new convert to Mac OS X myself, I found myself enjoying the tremendous flexibility offered by application specific VPNs. However, this functionality is certainly not limited to these platforms, and it is possible for &lt;a href=&#34;http://www.microsoft.com/windows/&#34;&gt;Windows&lt;/a&gt; users to utilize this functionality as well.&lt;/p&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;Some Examples&lt;/h3&gt;

&lt;p&gt;Here are a few examples of how you can use application specific VPNs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.citrix.com/English/ps2/products/product.asp?contentID=186&amp;amp;ntref=PROHOME_Main&#34;&gt;Citrix Presentation Server&lt;/a&gt;: Users can wrap Citrix ICA traffic in SSL using Stunnel; this avoids the need to pay for commercial solutions (although, quite honestly, the commercial solutions are typically easier to deploy and manage).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;E-Mail: Lots of people talk about securing e-mail, but not usually in the context of securing client-to-server traffic. With Stunnel, you can add SSL support for IMAP, POP, and/or SMTP even if the server doesn&amp;rsquo;t support SSL natively. In fact, you can add Stunnel to &lt;a href=&#34;http://www.microsoft.com/exchange/default.mspx&#34;&gt;Microsoft Exchange&lt;/a&gt; to help bolster that product&amp;rsquo;s built-in support for SSL (such as using SMTPS instead of STARTTLS for encrypting SMTP traffic).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Remote Desktop: This is a great technique for sysadmins. Need to use Remote Desktop to manage a Windows-based server remotely, but don&amp;rsquo;t want to run into security problems? Use Stunnel or OpenSSH to encrypt the RDP traffic. Stunnel, in my opinion, is particularly good here, since it&amp;rsquo;s incredibly easy to use the Windows port of Stunnel to establish an SSL listener on an arbitrary high port for this very purpose.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;Using Stunnel for SSL-based Application Specific VPNs&lt;/h3&gt;

&lt;p&gt;On Windows, there is no graphical user interface (GUI) for configuring Stunnel; all configuration must be done with the &lt;code&gt;stunnel.conf&lt;/code&gt; configuration file. A sample &lt;code&gt;stunnel.conf&lt;/code&gt; file is found below; this file listens on TCP port 1494 and forwards traffic to TCP port 3389 on the same system. (Note that this would be a sample &lt;code&gt;stunnel.conf&lt;/code&gt; file for a server-side configuration.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CApath = c:\windows\system32\stunnel  
cert = c:\windows\system32\stunnel\stunnel.pem  
client = no  
service = SSLTunnel  
[rdp]  
accept = 1494  
connect = 3389
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once Stunnel has been configured, running &lt;code&gt;stunnel --install&lt;/code&gt; will install it as a system service; this service can then be stopped and started through the Services MMC console just like any other background service.&lt;/p&gt;

&lt;p&gt;Of course, this is only half the work; you&amp;rsquo;ll also need an equivalent Stunnel configuration on the client side, since the Microsoft RDP client (the &lt;a href=&#34;http://www.microsoft.com/downloads/details.aspx?FamilyID=80111f21-d48d-426e-96c2-08aa2bd23a49&amp;amp;DisplayLang=en&#34;&gt;Windows version&lt;/a&gt; or the &lt;a href=&#34;http://www.microsoft.com/mac/otherproducts/otherproducts.aspx?pid=remotedesktopclient&#34;&gt;Mac OS X&lt;/a&gt; version) does not support SSL. Also, note that the SSL certificate used by Stunnel needs to be in PEM format (which is a nice lead-in to my article discussing the &lt;a href=&#34;http://blog.scottlowe.org/2005/12/02/certificate-conversion-using-openssl/&#34;&gt;conversion of certificates&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;On Mac OS X, there is a graphical utility for managing Stunnel called SSL Enabler. (Note that I was not able to find a home page for this utility; downloads can be found at various sites.)&lt;/p&gt;

&lt;p&gt;On Linux, the configuration again involves editing the &lt;code&gt;stunnel.conf&lt;/code&gt; file and launching stunnel (either in the foreground or as a daemon). I&amp;rsquo;m not aware of any GUI utilities for configuring Stunnel on Linux, but that certainly doesn&amp;rsquo;t mean they don&amp;rsquo;t exist.&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;Using SSH for Application Specific VPNs&lt;/h3&gt;

&lt;p&gt;As with Stunnel, it&amp;rsquo;s also possible to use SSH to create application specific VPNs. Mac OS X comes with OpenSSH, as do most distributions of Linux and various flavors of BSD. Windows users can also find various ports of OpenSSH and utilities such as &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34;&gt;PuTTY&lt;/a&gt; that make it possible to use SSH for application specific VPNs as well.&lt;/p&gt;

&lt;p&gt;On Mac OS X, the following command in Terminal will create an application specific VPN to encrypt IMAP traffic to a remote server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -L 1143:imapserver.domain.com:143 -N -f user@sshserver.domain.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This same technique could be used to encrypt WebDAV traffic to a remote web server, other types of mail traffic (POP3 or SMTP, for example), RDP (for Remote Desktop), etc. Note that it doesn&amp;rsquo;t work well with HTTP traffic that requires the use of host headers.&lt;/p&gt;

&lt;p&gt;There are a few graphical utilities on Mac OS X for managing SSH tunnels; these include &lt;a href=&#34;http://projects.tynsoe.org/en/stm/&#34;&gt;SSH Tunnel Manager&lt;/a&gt; and &lt;a href=&#34;http://www.leapingbytes.com/almostvpn&#34;&gt;AlmostVPN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Not being a regular day-to-day Linux user (not on the desktop, at least), I don&amp;rsquo;t know of any SSH tunnel management applications, but I would be very surprised if they didn&amp;rsquo;t exist.&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Creating Site-to-Site Application Specific VPNs&lt;/h3&gt;

&lt;p&gt;Most of the examples so far have been using SSH and/or Stunnel to connect endpoints (i.e., a single laptop or desktop computer) to a remote resource via an application specific VPN. However, it&amp;rsquo;s also easily possible to create application specific site-to-site VPNs, whose purpose is to secure only a particular type of traffic between two locations.&lt;/p&gt;

&lt;p&gt;Consider this example. CompanyA wants to send e-mail to CompanyB, but wants that e-mail to be secure. If both mail servers support TLS, then the organizations could use TLS to secure the SMTP traffic. If not, then the companies can use Stunnel to establish an SSL connection between two systems. HostA at CompanyA can use Stunnel as a client side application to listen for unencrypted connections and pass them as encrypted connections to HostB at CompanyB. HostB at CompanyB is using Stunnel to listen for encrypted connections and passes them unencrypted to the mail server at CompanyB. With a simple configuration, the mail servers at both companies can be configured to pass mail connections for other company through the Stunnel connection. With no additional cost and very little configuration, all e-mail traffic between the two organizations has now been secured. All this without the complexity of a typical B-to-B VPN and the associated access controls.&lt;/p&gt;

&lt;p&gt;For more information, documents on &lt;a href=&#34;http://blog.scottlowe.org/downloads/ptd-asvpn-ssh.doc&#34;&gt;application specific VPNs with SSH&lt;/a&gt; and &lt;a href=&#34;http://blog.scottlowe.org/downloads/ptd-asvpn-stunnel.doc&#34;&gt;application specific VPNs with Stunnel&lt;/a&gt; are available.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>WatchGuard Firebox VPN and Active Directory Integration</title>
          <link>http://lowescott.github.io/2005/12/06/watchguard-firebox-vpn-and-active-directory-integration/</link>
          <pubDate>Tue, 06 Dec 2005 17:38:24 &#43;0000</pubDate>
          <author>Scott Lowe</author>
          <guid>http://lowescott.github.io/2005/12/06/watchguard-firebox-vpn-and-active-directory-integration/</guid>
          <description>

&lt;p&gt;A short while back, I posted an article on &lt;a href=&#34;http://blog.scottlowe.org/2005/11/22/cisco-pix-vpn-and-active-directory-integration/&#34;&gt;Cisco PIX VPN and Active Directory integration&lt;/a&gt;. Now, I&amp;rsquo;d like to follow that article up with a version looking at integration between Active Directory and &lt;a href=&#34;http://www.watchguard.com/&#34;&gt;WatchGuard&lt;/a&gt; Firebox VPNs.&lt;/p&gt;

&lt;p&gt;As with the PIX-AD integration document, this article assumes that you have some basic knowledge of how to work with the WatchGuard Firebox series of firewalls. This article was written using version 6.2 of the WatchGuard Firebox System software and Windows Server 2003; other versions of either the firewall software or Windows should be similar.&lt;/p&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;Configuring the Firebox&lt;/h3&gt;

&lt;p&gt;First, we&amp;rsquo;ll need to setup the Firebox. Use the Firebox software (Policy Manager, specifically) to perform the following configuration tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Add the server that is running IAS (or will be running IAS; see below) as a RADIUS server in the Authentication Servers dialog box (found on the Setup menu). Here, you&amp;rsquo;ll need to specify the server&amp;rsquo;s IP address, port number (the default of 1645 will be fine), and the shared secret.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Instruct the firewall to use RADIUS by going to Setup &amp;gt; Firewall Authentication and selecting &amp;ldquo;RADIUS&amp;rdquo; as the authentication type.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Configure the firewall&amp;rsquo;s Remote User VPN (on the Network menu) to use RADIUS by checking the &amp;ldquo;Use RADIUS to authenticate remote users&amp;rdquo; check box.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once this is done, proceed with configuring PPTP-based remote user VPNs as usual. Be sure to add a rule allowing traffic to/from the pptp_users group; otherwise, VPN users will be subject to the same traffic restrictions as Internet users.&lt;/p&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;Configuring Internet Authentication Service&lt;/h3&gt;

&lt;p&gt;Before doing anything else, create a new global security group in Active Directory. Call it &amp;ldquo;pptp_users&amp;rdquo;, just like the name of the group on the Firebox. This is an important part of the glue that will bind the Firebox together with Active Directory.&lt;/p&gt;

&lt;p&gt;If IAS is not already installed, install IAS using the Add/Remove Programs icon in Control Panel.&lt;/p&gt;

&lt;p&gt;Once it has been installed, launch it from the Administrative Tools folder on the Start Menu and we&amp;rsquo;ll proceed with configuring it for authenticating VPN connections to the Firebox.&lt;/p&gt;

&lt;p&gt;First, we need to grant IAS permission to read dial-in properties from user accounts in Active Directory. To do this, right-click on the &amp;ldquo;Internet Authentication Service (Local)&amp;rdquo; and select &amp;ldquo;Register Server in Active Directory&amp;rdquo;. Select Yes (or OK) if prompted to confirm. Note that if IAS was already installed, it may have already been registered with Active Directory as well.&lt;/p&gt;

&lt;p&gt;With that done, we can now configure the Firebox as a RADIUS client. Right-click on RADIUS Clients and select New RADIUS Client. In the wizard, specify the IP address (or DNS name) of the Firebox&amp;rsquo;s trusted interface and the shared secret. Note that this shared secret is the same secret key specified when configuring the RADIUS server in the Firebox previously. RADIUS clients use this to authenticate to RADIUS servers, so make it a reasonably strong password.&lt;/p&gt;

&lt;p&gt;Now create a new remote access policy. Right-click on Remote Access Policies and select New Remote Access Policy. In the wizard, specify a name, select to create a custom policy, and then add the following conditions to the policy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;NAS-IP-Address: This will be the IP address of the Firebox&amp;rsquo;s trusted interface. This helps to ensure that this policy only applies to VPN requests from this firewall and not from any other RADIUS client.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Windows-Groups: This should be the &amp;ldquo;pptp_users&amp;rdquo; security group created earlier. Any user that should be allowed to authenticate on a VPN connection will need to be a member of this group.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, this policy should grant access. On the next screen, select &amp;ldquo;Edit Profile&amp;rdquo; to edit the remote access profile. This is important because we&amp;rsquo;ll need to verify that the RADIUS server is passing the correct information to the Firebox.&lt;/p&gt;

&lt;p&gt;On the Advanced tab, remove all the attributes listed there (Service-Type and Framed-Protocol are there by default) and then add the Filter-Id attribute. To this attribute, add the string value &amp;ldquo;pptp_users&amp;rdquo;. Click OK to save these changes to the profile and then finish creating the policy.&lt;/p&gt;

&lt;p&gt;Make this policy the first policy (using the Move Up/Move Down commands in the IAS console), add a user to the group created earlier, and then test your connection. Remote systems attempting to connect via PPTP should now be able to authenticate the VPN connection using their Active Directory usernames and passwords.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; I&amp;rsquo;ve updated this entry to correct some errors pointed out in the comments. Thanks for the feedback!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Certificate Conversion Using OpenSSL</title>
          <link>http://lowescott.github.io/2005/12/02/certificate-conversion-using-openssl/</link>
          <pubDate>Fri, 02 Dec 2005 16:08:35 &#43;0000</pubDate>
          <author>Scott Lowe</author>
          <guid>http://lowescott.github.io/2005/12/02/certificate-conversion-using-openssl/</guid>
          <description>&lt;p&gt;In my various adventures with replacing Windows-based servers with Linux servers, I have had need on several occasions to take an SSL certificate (generated using Microsoft Certificate Services) and make it available to a Linux-based server. In some cases, it was to be used by the SSL wrapper &lt;a href=&#34;http://stunnel.mirt.net/index.html&#34;&gt;Stunnel&lt;/a&gt;; in others, it was for &lt;a href=&#34;http://www.apache.org/httpd/&#34;&gt;Apache&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In either case, the certificate needed to be in the PEM (originally Privacy Enhanced Mail, now a standard for encoding certificates) format. Windows, on the other hand, typically uses the PFX (PKCS #12) format for storing certificates. To prepare certificates for use on Linux, the certificates must be converted to PEM format.&lt;/p&gt;

&lt;p&gt;In the hopes that this information might be useful to others, here&amp;rsquo;s a process for converting from PFX to PEM using &lt;a href=&#34;http://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt;. With the exception of only a few items, the process is identical on Linux, &lt;a href=&#34;http://www.apple.com/macosx/&#34;&gt;Mac OS X&lt;/a&gt;, and &lt;a href=&#34;http://www.microsoft.com/windowsserver2003/default.mspx&#34;&gt;Windows &lt;sup&gt;2000&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2003&lt;/sub&gt;&lt;/a&gt;. These steps were confirmed using OpenSSL 0.9.7a on Red Hat Linux 9.0, using OpenSSL 0.9.6i on Mac OS X 10.2.8, and OpenSSL 0.9.7c on Windows Server 2003.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If the certificate is not already available in PFX format, use the Certificates MMC snap-in to export the certificate and the corresponding private key to a PFX file. Be sure to note the passphrase used to protect the PFX file; it will be needed later. If the certificate (and its corresponding private key) is already available in PFX format and the passphrase for the PFX file is known, proceed to step 2.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;At a terminal prompt, type &lt;code&gt;openssl pkcs12 -in _pfxfilename.pfx_ -out _tempfile.pem_&lt;/code&gt;. This will convert the PFX file to a PEM file. The OpenSSL toolkit will prompt for the import passphrase; this will be the passphrase specified in step 1. A PEM passphrase will also be needed; make note of the passphrase used here (it will be needed later).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Using a text editor (such as vi on a Linux system, or Notepad on a Windows system), split the encrypted RSA private key and the certificate into two separate files. Remove all extra text, leaving only the text between the lines with the dashes. Make note of the filenames; they will be needed later.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The RSA key is currently encrypted; this will an automated launch for the application using the certificate. It will be necessary to decrypt the RSA private key. To decrypt the RSA private key, use the command &lt;code&gt;openssl rsa -in _encryptedkey_ -out _decryptedkey_&lt;/code&gt; (where &lt;em&gt;encryptedkey&lt;/em&gt; is the file containing the RSA private key, as separated in step 3, and &lt;em&gt;decryptedkey&lt;/em&gt; is the file that will contain the decrypted RSA private key). The OpenSSL toolkit will prompt for the RSA key passphrase; this will be the passphrase specified in step 2.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On Linux or Mac OS X: To concatenate the decrypted RSA private key and the certificate into a single file, use the command &lt;code&gt;cat _decryptedkey certificatefile_ &amp;gt; _finalfile.pem_&lt;/code&gt; (where &lt;em&gt;decryptedkey&lt;/em&gt; is the decrypted RSA key produced in step 4 and &lt;em&gt;certificatefile&lt;/em&gt; is the file containing only the certificate, as produced in step 3).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On Windows: To combine the decrypted RSA private key and the certificate into a single file, use the command &lt;code&gt;copy /b _decryptedkey_+_certificatefile_ _finalfile.pem_&lt;/code&gt; (where &lt;em&gt;decryptedkey&lt;/em&gt; is the decrypted RSA key produced in step 4 and &lt;em&gt;certificatefile&lt;/em&gt; is the file containing only the certificate, as produced in step 3).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Edit the concatenated file (finalfile.pem from step 5) with a text editor to add a blank line between the decrypted RSA private key and the certificate, and a blank line after the end of the certificate.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point, the certificate is ready for use. &lt;strong&gt;&lt;em&gt;Be sure&lt;/em&gt;&lt;/strong&gt; to guard the unencrypted private key with extreme caution; loss of this file can result in the compromise of your system. Note also that most applications require that the certificates be owned by root and readable only by root (&lt;code&gt;chown root:root&lt;/code&gt; to make them owned by root and &lt;code&gt;chmod 600&lt;/code&gt; to make them readable only by root).&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Secure Remote Filesystem</title>
          <link>http://lowescott.github.io/2005/11/29/secure-remote-filesystem/</link>
          <pubDate>Tue, 29 Nov 2005 16:57:00 &#43;0000</pubDate>
          <author>Scott Lowe</author>
          <guid>http://lowescott.github.io/2005/11/29/secure-remote-filesystem/</guid>
          <description>&lt;p&gt;This is something that only a computer junkie could enjoy. In conjunction with the &lt;a href=&#34;http://fuse.sourceforge.net/&#34;&gt;FUSE&lt;/a&gt; project (now an official part of the Linux kernel as of version 2.6.14), an SSH-wrapped remote filesystems&amp;ndash;called &lt;a href=&#34;http://fuse.sourceforge.net/sshfs.html&#34;&gt;sshfs&lt;/a&gt;&amp;ndash;has been created.&lt;/p&gt;

&lt;p&gt;This &lt;a href=&#34;http://www.linux.com/article.pl?sid=05/11/11/176206&#34;&gt;recent article&lt;/a&gt; describes sshfs in a bit more detail and provides some additional information.&lt;/p&gt;

&lt;p&gt;So what does this mean? It means that for any remote system you can reach via SSH, you can mount that remote system&amp;rsquo;s filesystem inside an SSH tunnel. I can think of numerous possibilities, not the least of which involves easily updating a web site hosted on a remote web server without having to FTP (or SFTP) the files back and forth.&lt;/p&gt;

&lt;p&gt;Now, if only there was a &lt;a href=&#34;http://www.apple.com/macosx/&#34;&gt;Mac OS X&lt;/a&gt; version of sshfs&amp;hellip;it&amp;rsquo;s currently only available for Linux and &lt;a href=&#34;http://www.freebsd.org/&#34;&gt;FreeBSD&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Cisco PIX VPN and Active Directory Integration</title>
          <link>http://lowescott.github.io/2005/11/22/cisco-pix-vpn-and-active-directory-integration/</link>
          <pubDate>Tue, 22 Nov 2005 19:01:54 &#43;0000</pubDate>
          <author>Scott Lowe</author>
          <guid>http://lowescott.github.io/2005/11/22/cisco-pix-vpn-and-active-directory-integration/</guid>
          <description>

&lt;p&gt;Rather than publishing this information in PDF form on my business website, I&amp;rsquo;ve decided to try something new and post it here as a blog entry. So, here goes.&lt;/p&gt;

&lt;p&gt;This information assumes that you have some experience with the Cisco PIX firewall (i.e., you know how to enter configuration commands and have a basic idea of what the configuration commands actually do) as well as some experience with Windows and Active Directory.&lt;/p&gt;

&lt;p&gt;With that information in hand, let&amp;rsquo;s get started.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Configuring the Cisco PIX&lt;/h2&gt;

&lt;p&gt;First, we&amp;rsquo;ll need to setup the PIX firewall. Use the commands below to configure the PIX for PPTP-based VPN connections that will authenticate against an Active Directory back-end.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ip local pool vpn-pool 10.10.10.1-10.10.10.254  
aaa-server vpn-auth inside host 10.10.10.5 secretkey  
aaa-server vpn-auth inside host 10.10.10.6 secretkey  
aaa-server vpn-auth protocol radius  
vpdn group vpn-pptp-group accept dialin pptp  
vpdn group vpn-pptp-group ppp authentication mschap  
vpdn group vpn-pptp-group ppp encryption mppe 128 required  
vpdn group vpn-pptp-group client configuration \  
address local vpn-pool  
vpdn group vpn-pptp-group client configuration \  
dns 10.10.10.5 10.10.10.6  
vpdn group vpn-pptp-group client configuration \  
wins 10.10.10.6 10.10.10.5  
vpdn group vpn-pptp-group client authentication aaa vpn-auth  
vpdn enable outside  
sysopt connect permit-pptp  
access-list acl-nat0 permit ip 10.10.1.0 255.255.255.0 \  
10.10.10.0 255.255.255.0  
nat (inside) 0 access-list acl-nat0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Note that I have placed a backslash to indicate text that is wrapped onto two lines here but should be entered all on a single line in the PIX configuration.)&lt;/p&gt;

&lt;p&gt;In this configuration, replace the IP addresses on lines 2 and 3 (the &lt;code&gt;aaa-server vpn-auth&lt;/code&gt; commands) with the IP addresses of the servers running Internet Authentication Service (IAS) on Windows. See the next section for more information on configuring IAS.&lt;/p&gt;

&lt;p&gt;On those same lines, replace the text &lt;code&gt;secretkey&lt;/code&gt; with the RADIUS shared secret that will be used when configuring the RADIUS/IAS server in the next section.&lt;/p&gt;

&lt;p&gt;Likewise, replace the IP addresses on lines 9 and 10 (the &lt;code&gt;vdpn group vpn-pptp-group client configuration&lt;/code&gt; lines that pass out the DNS and WINS servers to VPN clients) with the IP addresses of your DNS and WINS servers, respectively.&lt;/p&gt;

&lt;p&gt;That should do it. Save the configuration to the PIX and then move on to configuring IAS.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Configuring Internet Authentication Service&lt;/h2&gt;

&lt;p&gt;Before doing anything else, create a new global security group in Active Directory. Call it something like &amp;ldquo;VPN Users&amp;rdquo; or similar. We&amp;rsquo;ll use this group later as an additional security check in validating VPN connections.&lt;/p&gt;

&lt;p&gt;Next, install IAS using the Add/Remove Programs icon in Control Panel. Once it has been installed, launch it from the Administrative Tools folder on the Start Menu and we&amp;rsquo;ll proceed with configuring it for authenticating VPN connections to the PIX firewall.&lt;/p&gt;

&lt;p&gt;First, we need to grant IAS permission to read dial-in properties from user accounts in Active Directory. To do this, right-click on the &amp;ldquo;Internet Authentication Service (Local)&amp;rdquo; and select &amp;ldquo;Register Server in Active Directory&amp;rdquo;. Select Yes (or OK) if prompted to confirm.&lt;/p&gt;

&lt;p&gt;With that done, we can now configure the PIX firewall as a RADIUS client. Right-click on RADIUS Clients and select New RADIUS Client. In the wizard, specify the IP address (or DNS name) of the PIX firewall&amp;rsquo;s internal IP address and the shared secret. Note that this shared secret is the same secret key specified in the PIX configuration above. RADIUS clients use this to authenticate to RADIUS servers, so make it a reasonably strong password.&lt;/p&gt;

&lt;p&gt;Now create a remote access policy. Right-click on Remote Access Policies and select New Remote Access Policy. In the wizard, specify a name, select to create a custom policy, and then add the following conditions to the policy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;NAS-IP-Address: This will be the IP address of the PIX firewall&amp;rsquo;s internal interface. This helps to ensure that this policy only applies to VPN requests from this firewall and not from any other RADIUS client.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Windows-Groups: This should be the security group created earlier. Any user that should be allowed to authenticate on a VPN connection will need to be a member of this group.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The rest of the policy should be very straightforward. Make this policy the first policy (using the Move Up/Move Down commands in the IAS console), add a user to the group created earlier, and then test your connection. Remote systems attempting to connect via PPTP should now be able to authenticate the VPN connection using their Active Directory usernames and passwords.&lt;/p&gt;

&lt;p&gt;Although this was written from the perspective of authenticating PPTP connections, the process should be very similar for IPSec VPN clients as well.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>STARTTLS and IMAP in Mail.app</title>
          <link>http://lowescott.github.io/2005/07/02/starttls-and-imap-in-mailapp/</link>
          <pubDate>Sat, 02 Jul 2005 20:47:16 &#43;0000</pubDate>
          <author>Scott Lowe</author>
          <guid>http://lowescott.github.io/2005/07/02/starttls-and-imap-in-mailapp/</guid>
          <description>&lt;p&gt;I &lt;a href=&#34;http://blog.scottlowe.org/2005/05/14/nonstandard-implementations/&#34;&gt;blogged&lt;/a&gt; earlier about my frustration with the &lt;a href=&#34;http://www.apple.com/macosx/&#34;&gt;Mac OS X&lt;/a&gt; Mail.app mail client and its apparent lack of STARTTLS support with IMAP4. Well, on a whim today I decided to take this issue back up again.&lt;/p&gt;

&lt;p&gt;Since &lt;a href=&#34;http://www.microsoft.com/exchange/&#34;&gt;Microsoft Exchange&lt;/a&gt; does not support STARTTLS, I had to use &lt;a href=&#34;http://www.vergenet.net/linux/perdition/&#34;&gt;Perdition&lt;/a&gt; as an IMAP proxy in front of Exchange. Earlier attempts to get Mail.app to do STARTTLS had failed (not sure why), but today I decided to try changing the IMAP port from 993 (the default when you check the &amp;ldquo;Use SSL&amp;rdquo; box) to 143 (the standard IMAP4 port). Oddly enough, it seemed to work!&lt;/p&gt;

&lt;p&gt;Curious to find out for sure, I trotted out tcpdump on the mail gateway running Perdition to capture traffic to/from Mail.app and to/from the back end mail server. The traffic to/from the back end mail server was transmitted in the clear (I used plain text messages so that I could see the content), but the traffic to/from Mail.app was not readable. I also saw Mail.app issue a CAPABILITY command, then issue a STARTTLS command. Bingo!&lt;/p&gt;

&lt;p&gt;So, it appears that Mail.app does indeed support STARTTLS for IMAP, but only if you set the port number back to 143 after checking the &amp;ldquo;Use SSL&amp;rdquo; checkbox.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Transparent RDP Tunneling, Part 2</title>
          <link>http://lowescott.github.io/2005/07/01/transparent-rdp-tunneling-part-2/</link>
          <pubDate>Fri, 01 Jul 2005 22:54:45 &#43;0000</pubDate>
          <author>Scott Lowe</author>
          <guid>http://lowescott.github.io/2005/07/01/transparent-rdp-tunneling-part-2/</guid>
          <description>&lt;p&gt;After some fiddling around with &lt;a href=&#34;http://stunnel.mirt.net/index.html&#34;&gt;Stunnel&lt;/a&gt; on &lt;a href=&#34;http://www.openbsd.org/&#34;&gt;OpenBSD&lt;/a&gt;, I got the transparent RDP tunneling inside SSL working. I still need to run some network captures with Ethereal or similar to make sure that the traffic is encrypted, but I don&amp;rsquo;t see any reason why it won&amp;rsquo;t be. Overall, the process was a bit easier than I expected. Once I get it better documented, I&amp;rsquo;ll find an appropriate format in which to distribute the information for others to use in their own networks.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Transparent RDP Tunneling</title>
          <link>http://lowescott.github.io/2005/06/29/transparent-rdp-tunneling/</link>
          <pubDate>Wed, 29 Jun 2005 23:48:12 &#43;0000</pubDate>
          <author>Scott Lowe</author>
          <guid>http://lowescott.github.io/2005/06/29/transparent-rdp-tunneling/</guid>
          <description>&lt;p&gt;As part of my experimentation with &lt;a href=&#34;http://www.openbsd.org/&#34;&gt;OpenBSD&lt;/a&gt; 3.7, I&amp;rsquo;m going to try to setup a way of transparently tunneling RDP (Remote Desktop Protocol, used by Windows Remote Desktop/Terminal Services) inside SSL. I&amp;rsquo;m thinking that I can use IP aliases and &lt;a href=&#34;http://stunnel.mirt.net/index.html&#34;&gt;Stunnel&lt;/a&gt; to have &amp;ldquo;ordinary&amp;rdquo; RDP encapsulated in SSL by Stunnel and then passed off to another instance of Stunnel at the other end. Then, from the RDP client, I just connect to one of the IP aliases and the rest is handled transparently.&lt;/p&gt;

&lt;p&gt;When I get it working, I&amp;rsquo;ll post more details here as well as on the &lt;a href=&#34;http://www.mercurionsystems.com/&#34;&gt;Mercurion Systems&lt;/a&gt; web site.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Perdition Working Now</title>
          <link>http://lowescott.github.io/2005/05/15/perdition-working-now/</link>
          <pubDate>Sun, 15 May 2005 16:31:02 &#43;0000</pubDate>
          <author>Scott Lowe</author>
          <guid>http://lowescott.github.io/2005/05/15/perdition-working-now/</guid>
          <description>&lt;p&gt;I finally managed to get &lt;a href=&#34;http://www.vergenet.net/linux/perdition/&#34;&gt;Perdition&lt;/a&gt; working. Still unable to confirm if &lt;a href=&#34;http://www.apple.com/macosx/&#34;&gt;Mac OS X&amp;rsquo;s&lt;/a&gt; Mail.app supports STARTTLS (my experience thus far says No), I had to resort to using &lt;a href=&#34;http://stunnel.mirt.net/index.html&#34;&gt;Stunnel&lt;/a&gt; to wrap IMAP inside an SSL tunnel, then forward the IMAP traffic to Perdition on the same host. The Perdition proxy then passes the traffic to the back-end mail server. It&amp;rsquo;s not the solution that I really wanted, but it will do for now. At least the &lt;a href=&#34;http://www.microsoft.com/exchange/&#34;&gt;Exchange Server 2003&lt;/a&gt; IMAP server isn&amp;rsquo;t exposed directly to external networks.&lt;/p&gt;

&lt;p&gt;On a slightly related note, the &lt;a href=&#34;http://www.slipstick.com/&#34;&gt;Slipstick Systems&lt;/a&gt; web site has a link to an IMAP proxy server that implements STARTTLS as a workaround for Exchange&amp;rsquo;s lack of native support for STARTTLS. The IMAP proxy can be found at &lt;a href=&#34;http://www.slipstick.com/files/imapproxysvc.zip&#34;&gt;http://www.slipstick.com/files/imapproxysvc.zip&lt;/a&gt;. So, if you have an IMAP4 client that supports STARTTLS and want to connect it to Exchange, you can use this IMAP proxy. At least, until &lt;a href=&#34;http://www.microsoft.com/&#34;&gt;Microsoft&lt;/a&gt; puts STARTTLS support into Exchange directly.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Nonstandard Implementations</title>
          <link>http://lowescott.github.io/2005/05/14/nonstandard-implementations/</link>
          <pubDate>Sat, 14 May 2005 22:24:04 &#43;0000</pubDate>
          <author>Scott Lowe</author>
          <guid>http://lowescott.github.io/2005/05/14/nonstandard-implementations/</guid>
          <description>&lt;p&gt;In my experiments with &lt;a href=&#34;http://www.vergenet.net/linux/perdition/&#34;&gt;Perdition&lt;/a&gt;, I learned a couple of very interesting facts. First, the IMAP4 implementation on &lt;a href=&#34;http://www.microsoft.com/exchange/&#34;&gt;Exchange Server 2003&lt;/a&gt; does not support the STARTTLS command, as described in &lt;a href=&#34;http://www.networksorcery.com/enp/rfc/rfc2595.txt&#34;&gt;RFC 2595&lt;/a&gt; and re-affirmed in &lt;a href=&#34;http://www.networksorcery.com/enp/rfc/rfc3501.txt&#34;&gt;RFC 3501&lt;/a&gt;. Instead, Exchange expects an SSL session to be established immediately, and then IMAP is spoken. This is similar to the &amp;ldquo;smtpd_tls_wrappermode&amp;rdquo; directive that &lt;a href=&#34;http://www.postfix.org/&#34;&gt;Postfix&lt;/a&gt; supports.&lt;/p&gt;

&lt;p&gt;Second, it appears that the &lt;a href=&#34;http://www.apple.com/macosx/&#34;&gt;Mac OS X&lt;/a&gt; Mail application (commonly referred to as Mail.app) also uses this IMAP-over-SSL approach, since I&amp;rsquo;ve been using Mail.app to connect to Exchange using IMAP with SSL for quite some time. I&amp;rsquo;m trying to confirm that now, but having precious little luck finding any definitive information one way or the other. If anyone knows for certain, please let me know. I&amp;rsquo;m going to keep searching.&lt;/p&gt;

&lt;p&gt;This is one of those things that just makes me crazy.&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
